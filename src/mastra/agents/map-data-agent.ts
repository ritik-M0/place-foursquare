import { Agent } from '@mastra/core/agent';
import { openai } from '@ai-sdk/openai';
import { z } from 'zod';

// Import orchestration tools
import { planTool } from '../tools/planner-tool';
import { executePlanTool } from '../tools/execute-plan-tool';
import { formatMapDataTool } from '../tools/format-map-data-tool';

// Import ALL geospatial data-gathering tools that MapDataAgent needs to expose
// so that executePlanTool can access them.
import { tomtomFuzzySearchTool } from '../tools/tomtom-fuzzy-search-tool';
import { getGooglePlaceDetailsTool } from '../tools/google-place-details-tool';
import { getGooglePlacesInsightsTool } from '../tools/google-places-insights-tool';
import { searchPoiTool, getPlaceByIdTool } from '../tools/tomtom-tool';
import { searchEventsTool } from '../tools/events-tool'; // Events can have locations
import { getIpLocationTool } from '../tools/ip-location-tool'; // IP location is geospatial

export const mapDataAgent = new Agent({
  name: 'Map Data Agent',
  instructions: `
    You are a specialized map data agent. Your sole purpose is to process a user's query and generate a GeoJSON FeatureCollection containing all relevant geospatial information.

    **CRITICAL BEHAVIORAL RULES:**

    1.  **Plan Generation:** First, you MUST use the 'planTool' with the user's original query to generate a detailed plan of tool calls focused *only* on gathering geospatial data.
        *   Example: If the user asks "coffee shops in London and weather", you would call planTool({ query: "coffee shops in London" }) (focusing on the map part).
    2.  **Plan Execution:** Once you receive the plan from 'planTool', you MUST use the 'executePlanTool' with that generated plan to execute all the tool calls and gather all the necessary raw geospatial data.
    3.  **Map Data Formatting:** After executing the plan and collecting all raw geospatial data from 'executePlanTool', you MUST use the 'formatMapDataTool' with the collected raw data to consolidate it into a GeoJSON FeatureCollection.
        *   CRITICAL: Pass the EXACT results object from executePlanTool as the 'rawData' parameter to formatMapDataTool.
        *   Example: If executePlanTool returns { "tomtomFuzzySearchTool": {...}, "searchPoiTool": {...} }, pass this entire object as rawData: { rawData: { "tomtomFuzzySearchTool": {...}, "searchPoiTool": {...} } }
    4.  **Final Output:** Your final response to the user MUST be the GeoJSON FeatureCollection generated by the 'formatMapDataTool'. Do NOT include any text, explanations, or markdown formatting outside of the GeoJSON object.

    **CRITICAL DATA FLOW:**
    - executePlanTool returns: { toolId1: result1, toolId2: result2, ... }
    - formatMapDataTool expects: { rawData: { toolId1: result1, toolId2: result2, ... } }
    - You MUST pass the executePlanTool results as the rawData parameter to formatMapDataTool

    **Important Note:** You must follow these steps sequentially. Do not skip steps or try to combine them.
  `,
  model: openai('gpt-4.1-2025-04-14'),
  tools: {
    // Orchestration tools for this agent
    planTool,
    executePlanTool,
    formatMapDataTool,

    // All geospatial data-gathering tools must be exposed here so executePlanTool can access them.
    tomtomFuzzySearchTool,
    getGooglePlaceDetailsTool,
    getGooglePlacesInsightsTool,
    searchPoiTool,
    getPlaceByIdTool,
    searchEventsTool,
    getIpLocationTool,
    // Note: Tools like getWeatherTool, getFootTrafficSummaryTool are not directly geospatial feature generators,
    // so they are excluded from this agent's direct tools.
  },
  // The agent's output will be the text generated by the LLM based on its instructions.
  // The instructions guide it to output a GeoJSON string.
});
